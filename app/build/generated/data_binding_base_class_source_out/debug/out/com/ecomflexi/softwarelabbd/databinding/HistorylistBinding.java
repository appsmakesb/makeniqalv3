// Generated by view binder compiler. Do not edit!
package com.ecomflexi.softwarelabbd.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.ecomflexi.softwarelabbd.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HistorylistBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageButton all;

  @NonNull
  public final LinearLayout btnSpeakContainer;

  @NonNull
  public final LinearLayout btnSpeakContainer3;

  @NonNull
  public final ImageButton flex;

  @NonNull
  public final ImageButton roc;

  private HistorylistBinding(@NonNull LinearLayout rootView, @NonNull ImageButton all,
      @NonNull LinearLayout btnSpeakContainer, @NonNull LinearLayout btnSpeakContainer3,
      @NonNull ImageButton flex, @NonNull ImageButton roc) {
    this.rootView = rootView;
    this.all = all;
    this.btnSpeakContainer = btnSpeakContainer;
    this.btnSpeakContainer3 = btnSpeakContainer3;
    this.flex = flex;
    this.roc = roc;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HistorylistBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HistorylistBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.historylist, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HistorylistBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.all;
      ImageButton all = ViewBindings.findChildViewById(rootView, id);
      if (all == null) {
        break missingId;
      }

      id = R.id.btnSpeakContainer;
      LinearLayout btnSpeakContainer = ViewBindings.findChildViewById(rootView, id);
      if (btnSpeakContainer == null) {
        break missingId;
      }

      id = R.id.btnSpeakContainer3;
      LinearLayout btnSpeakContainer3 = ViewBindings.findChildViewById(rootView, id);
      if (btnSpeakContainer3 == null) {
        break missingId;
      }

      id = R.id.flex;
      ImageButton flex = ViewBindings.findChildViewById(rootView, id);
      if (flex == null) {
        break missingId;
      }

      id = R.id.roc;
      ImageButton roc = ViewBindings.findChildViewById(rootView, id);
      if (roc == null) {
        break missingId;
      }

      return new HistorylistBinding((LinearLayout) rootView, all, btnSpeakContainer,
          btnSpeakContainer3, flex, roc);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
